
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

def info (zone = -1):
	return 'Playback/Info(%s)' % (zone)

def alive (): 
	return 'Alive'
    
# mcws_command_shortcut(authenticate(_User, _Passwd), 	
#    'Authenticate').

def playlists ():
mcws_command_shortcut(playlists,
    'playlists',
    '',
    'Playlists/List').

mcws_command_shortcut(playingnow_simple,
    'playingnow_simple',
    '',
    'Playback/Playlist'('Action' = 'Serialize')).

mcws_command_shortcut(playlist_simple(Id),
    'playlist_simple(Id)',
    '',
    'Playlist/Files'('Action' = 'Serialize', 'PlaylistType'= 'ID', 'Playlist'= Id)).

mcws_command_shortcut(search_simple(Query),
    'search_simple(Query)',
    '',
    'Files/Search'('Action' = 'Serialize', 'Query'=Query)).

mcws_command_shortcut(playingnow,
    'playingnow',
    '',
    'Playback/Playlist'('Action' = 'MPL')).

mcws_command_shortcut(playingnow(Fields),
    'playingnow(Fields)',
    '',
    'Playback/Playlist'('Fields'= FieldsAtom, 'Action' = 'MPL')
):-
    atomic_list_concat(Fields, ',', FieldsAtom).

mcws_command_shortcut(playlist(Id), 
    'playlist(Id)',
    '',
    'Playlist/Files'('Action' = 'MPL', 'PlaylistType'= 'ID', 'Playlist'= Id)).

mcws_command_shortcut(playlist(Id, Fields),
    'playlist(Id, Fields)',
    '',
    'Playlist/Files'('Fields'= FieldsAtom, 'Action' = 'MPL', 'PlaylistType'= 'ID', 'Playlist'= Id)):-
		atomic_list_concat(Fields, ',', FieldsAtom).

mcws_command_shortcut(search(Query),
    'search(Query)',
    '',
    'Files/Search'('Action' = 'MPL', 'Query'=Query)).

mcws_command_shortcut(search(Query, Fields),
    'search(Query, Fields)',
    '',
    'Files/Search'('Fields'= FieldsAtom, 'Action' = 'MPL', 'Query'=Query)):-
	atomic_list_concat(Fields, ',', FieldsAtom).

mcws_command_shortcut(library,
    'library',
    '',
    'Library/Get'('Settings'= 0)).

mcws_command_shortcut(field(Key,Field),
    'field(Key,Field)',
    '',
    'Library/Values'('Field'=Field,'Files'= ['[Key]=', Key])).

mcws_command_shortcut(field(Field),
    'field(Field)',
    '',
    'Library/Values'('Field'=Field)).

mcws_command_shortcut(play(Key),
    'play(Key)',
    '',
    'Playback/PlayByKey'('Key'=Key)).

mcws_command_shortcut(play_index(Index),
    'play_index(Index)',
    '',
    'Playback/PlayByIndex'('Index'=Index)).


mcws_command_shortcut(set_field(Key,Field,Value),
    'set_field(Key,Field,Value)',
    '',
    Out):-

    mcws_set_command_shortcut(set_field(Key,Field,Value), Out).
        

mcws_command_shortcut(set_field_testonly(Key,Field,Value),
    'set_field_testonly(Key,Field,Value)',
    '', 
    alive
):-
    writef('item(%t) <~~~ %t(%t)    [not actual change]\n',[Key, Field, Value]),
    !.

mcws_command_shortcut(set_field_confirm(Key,Field,Value),  
    'set_field_confirm(Key,Field,Value)',
    '',
    'File/SetInfo'('File'= Key, 'Field'=[Field], 'Value'= Value)
):-
    writef('item(%t) <=== %t(%t) \n',[Key, Field, Value]),
    writef('Press any key to confirm the change\n'), % TODO more info can come here
    pause,
    !.

mcws_command_shortcut(set_field_write(Key,Field,Value),
    'set_field_write(Key,Field,Value)',
    '', 
    'File/SetInfo'('File'= Key, 'Field'=[Field], 'Value'= Value)
):-
    writef('item(%t) <=== %t(%t) \n',[Key, Field, Value]).  



% mcws_command_shortcut/2

mcws_set_command_shortcut(set_field(_,_,_),	 alive):-
    
	\+ mcws_test_write_access(_),!,
	writef_error('specify database access with mcws_write_access(false/true/confirm) before using set_field\n').	

mcws_set_command_shortcut(set_field(Key,Field,Value),
    set_field_testonly(Key,Field,Value)):-
	
	mcws_test_write_access(false),!.
	
mcws_set_command_shortcut(set_field(Key,Field,Value),
    set_field_confirm(Key,Field,Value)
):-	
	mcws_test_write_access(confirm),!.

mcws_set_command_shortcut(set_field(Key,Field,Value),
    set_field_write(Key,Field,Value)
):-	
    mcws_test_write_access(true),!.



% http://localhost:48105/MCWS/v1/Files/Search?Query=[GROUP]=%22TANGO%22%20[Genre]=Vals&Action=Serialize&Zone=-1&ZoneType=ID
% mcws_command_shortcut(search
% mcws_command_shortcut(search(Query),
% mcws_command_shortcut(search(Query,Fields),

% mcws_command_shortcut(image(Key),'File/GetImage', ['File'= KeyStr]):-
%	KeyStr= ['[', Key, ']'],
%	!.

##########


mcws_command_dictionary = {
	info:(lambda: return info()),
	
	
	
	(lambda(Zone = -1): 
		return
    
	(lambda Zone: 'Playback/Info'('Zone'= Zone))
	
    'info(Zone)',
    '',
    ).

mcws_command_shortcut(alive,
    'alive',
    '',
    'Alive').
    
% mcws_command_shortcut(authenticate(_User, _Passwd), 	
%    'Authenticate').

mcws_command_shortcut(playlists,
    'playlists',
    '',
    'Playlists/List').

mcws_command_shortcut(playingnow_simple,
    'playingnow_simple',
    '',
    'Playback/Playlist'('Action' = 'Serialize')).

mcws_command_shortcut(playlist_simple(Id),
    'playlist_simple(Id)',
    '',
    'Playlist/Files'('Action' = 'Serialize', 'PlaylistType'= 'ID', 'Playlist'= Id)).

mcws_command_shortcut(search_simple(Query),
    'search_simple(Query)',
    '',
    'Files/Search'('Action' = 'Serialize', 'Query'=Query)).

mcws_command_shortcut(playingnow,
    'playingnow',
    '',
    'Playback/Playlist'('Action' = 'MPL')).

mcws_command_shortcut(playingnow(Fields),
    'playingnow(Fields)',
    '',
    'Playback/Playlist'('Fields'= FieldsAtom, 'Action' = 'MPL')
):-
    atomic_list_concat(Fields, ',', FieldsAtom).

mcws_command_shortcut(playlist(Id), 
    'playlist(Id)',
    '',
    'Playlist/Files'('Action' = 'MPL', 'PlaylistType'= 'ID', 'Playlist'= Id)).

mcws_command_shortcut(playlist(Id, Fields),
    'playlist(Id, Fields)',
    '',
    'Playlist/Files'('Fields'= FieldsAtom, 'Action' = 'MPL', 'PlaylistType'= 'ID', 'Playlist'= Id)):-
		atomic_list_concat(Fields, ',', FieldsAtom).

mcws_command_shortcut(search(Query),
    'search(Query)',
    '',
    'Files/Search'('Action' = 'MPL', 'Query'=Query)).

mcws_command_shortcut(search(Query, Fields),
    'search(Query, Fields)',
    '',
    'Files/Search'('Fields'= FieldsAtom, 'Action' = 'MPL', 'Query'=Query)):-
	atomic_list_concat(Fields, ',', FieldsAtom).

mcws_command_shortcut(library,
    'library',
    '',
    'Library/Get'('Settings'= 0)).

mcws_command_shortcut(field(Key,Field),
    'field(Key,Field)',
    '',
    'Library/Values'('Field'=Field,'Files'= ['[Key]=', Key])).

mcws_command_shortcut(field(Field),
    'field(Field)',
    '',
    'Library/Values'('Field'=Field)).

mcws_command_shortcut(play(Key),
    'play(Key)',
    '',
    'Playback/PlayByKey'('Key'=Key)).

mcws_command_shortcut(play_index(Index),
    'play_index(Index)',
    '',
    'Playback/PlayByIndex'('Index'=Index)).


mcws_command_shortcut(set_field(Key,Field,Value),
    'set_field(Key,Field,Value)',
    '',
    Out):-

    mcws_set_command_shortcut(set_field(Key,Field,Value), Out).
        

mcws_command_shortcut(set_field_testonly(Key,Field,Value),
    'set_field_testonly(Key,Field,Value)',
    '', 
    alive
):-
    writef('item(%t) <~~~ %t(%t)    [not actual change]\n',[Key, Field, Value]),
    !.

mcws_command_shortcut(set_field_confirm(Key,Field,Value),  
    'set_field_confirm(Key,Field,Value)',
    '',
    'File/SetInfo'('File'= Key, 'Field'=[Field], 'Value'= Value)
):-
    writef('item(%t) <=== %t(%t) \n',[Key, Field, Value]),
    writef('Press any key to confirm the change\n'), % TODO more info can come here
    pause,
    !.

mcws_command_shortcut(set_field_write(Key,Field,Value),
    'set_field_write(Key,Field,Value)',
    '', 
    'File/SetInfo'('File'= Key, 'Field'=[Field], 'Value'= Value)
):-
    writef('item(%t) <=== %t(%t) \n',[Key, Field, Value]).  



% mcws_command_shortcut/2

mcws_set_command_shortcut(set_field(_,_,_),	 alive):-
    
	\+ mcws_test_write_access(_),!,
	writef_error('specify database access with mcws_write_access(false/true/confirm) before using set_field\n').	

mcws_set_command_shortcut(set_field(Key,Field,Value),
    set_field_testonly(Key,Field,Value)):-
	
	mcws_test_write_access(false),!.
	
mcws_set_command_shortcut(set_field(Key,Field,Value),
    set_field_confirm(Key,Field,Value)
):-	
	mcws_test_write_access(confirm),!.

mcws_set_command_shortcut(set_field(Key,Field,Value),
    set_field_write(Key,Field,Value)
):-	
    mcws_test_write_access(true),!.



% http://localhost:48105/MCWS/v1/Files/Search?Query=[GROUP]=%22TANGO%22%20[Genre]=Vals&Action=Serialize&Zone=-1&ZoneType=ID
% mcws_command_shortcut(search
% mcws_command_shortcut(search(Query),
% mcws_command_shortcut(search(Query,Fields),

% mcws_command_shortcut(image(Key),'File/GetImage', ['File'= KeyStr]):-
%	KeyStr= ['[', Key, ']'],
%	!.


% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%               Valid Query
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% mcws_command(Name:atom) is det.
%% mcws_command(Name:atom, Inputs:list) is det.
%% mcws_command(Name:atom, Inputs:list, Outputs:list) is det.

mcws_command(Name):- 
    mcws_command(Name, _Inputs).

    mcws_command(Name, Inputs):-
    mcws_command(Name, Inputs, _Outputs).

mcws_command(Name, Inputs, Outputs):-
        mcws_command(Name, _, RawInputs, RawOutputs),
        findall(X, member(X:_,RawInputs), Inputs),
        findall(X, member(X:_,RawOutputs), Outputs).
 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%		MCWS Direct Commands
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

		
%% mcws_command(+Command:atom, +Explanation:atom, +Inputs, +Outputs) is nondet.
% Inputs/Outputs = Name:explanation.


mcws_command(
	'Alive',
	'Simple query to ensure the server is running and to check versions.',
		[],
		['RuntimeGUID': 		'The runtime GUID of this web service.',
         'LibraryVersion': 	'The version number of the library.',
         'ProgramVersion': 	'The version number of the program.',
         'FriendlyName': 		'The friendly name of this server.',
         'AccessKey': 		'The access key of this server.']).
    
	
mcws_command(
'Authenticate',
	'Simple query to test and establish authentication.',
		['Token':'The token that can be appended to calls in place of HTTP authentication.'],
		[]).

/*		
% Playback

      Playback/PlayPause
         Start playback or toggle the pause state.
         Parameters:
            Zone: The zone the command is targetted for. (default: -1)
            ZoneType: The type of value provided in 'Zone' (ID: zone id; Index: zone index; Name: zone name (default: ID)
         Response:
         Examples:
            Click here

      Playback/Pause
         Set the pause state.
         Parameters:
            State: The new pause state (0: unpaused, 1: paused, -1: toggle) (default: -1)
            Zone: The zone the command is targetted for. (default: -1)
            ZoneType: The type of value provided in 'Zone' (ID: zone id; Index: zone index; Name: zone name (default: ID)
         Response:
         Examples:
            Click here

      Playback/Next
         Advance to the next track.
         Parameters:
            Zone: The zone the command is targetted for. (default: -1)
            ZoneType: The type of value provided in 'Zone' (ID: zone id; Index: zone index; Name: zone name (default: ID)
         Response:
         Examples:
            Click here

      Playback/Previous
         Advance to the previous track.
         Parameters:
            Zone: The zone the command is targetted for. (default: -1)
            ZoneType: The type of value provided in 'Zone' (ID: zone id; Index: zone index; Name: zone name (default: ID)
         Response:
         Examples:
            Click here

      Playback/Stop
         Stops playback.
         Parameters:
            Zone: The zone the command is targetted for. (default: -1)
            ZoneType: The type of value provided in 'Zone' (ID: zone id; Index: zone index; Name: zone name (default: ID)
         Response:
         Examples:
            Click here

      Playback/Position
         Get / set the position.
         Parameters:
            Position: The position to seek to, in milliseconds. (default: )
            Relative: When set to 1, 'Position' will be added to the current position to allow jumping forward. When set to -1, 'Position' will be subtracted from the current position to allow jumping backwards. Use a 'Position' of -1 to jump the default amount based on the media type. (default: )
            Zone: The zone the command is targetted for. (default: -1)
            ZoneType: The type of value provided in 'Zone' (ID: zone id; Index: zone index; Name: zone name (default: ID)
         Response:
            Position: The position in milliseconds (after applying changes, if any).
         Examples:
            Get current position
            Seek 10 seconds into playing file
            Jump backward (default amount)
            Jump forward (default amount)
            Jump forward 60 seconds

      Playback/Volume
         Get / set the volume.
         Parameters:
            Level: Level to change the volume to as a decimal from 0 to 1. Leave this blank to leave the volume unchanged and query for the current volume. (default: )
            Relative: When set to 1, 'Level' will be added to the current volume to allow increasing or descreasing the volume by some amount. (default: )
            Zone: The zone the command is targetted for. (default: -1)
            ZoneType: The type of value provided in 'Zone' (ID: zone id; Index: zone index; Name: zone name (default: ID)
         Response:
            Level: The volume as a decimal between 0 and 1 (after applying changes, if any).
            Display: The volume as a display string (after applying changes, if any).
         Examples:
            Get current volume
            Set volume to 75%
            Increase volume 10%
            Decrease volume 10%
*/
mcws_command(	
'Playback/Info',
	'Get information about the current playback.',
    
	[	'Zone': 'The zone the command is targetted for. (default: -1)',
		'ZoneType': 'The type of value provided in ''Zone'' (ID: zone id; Index: zone index; Name: zone name (default: ID)'],
		
	[	'Response':'',
        'State': 'The playback state of the player.',
		'FileKey': 'The database key of the playing file.',
        'PositionMS': 'The position of the playback in milliseconds.',
        'DurationMS': 'The duration of the playing file in milliseconds.',
        'ElapsedTimeDisplay': 'The elapsed playback time as a display friendly string.',
        'RemainingTimeDisplay': 'The remaining playback time as a display friendly string.',
        'TotalTimeDisplay': 'The total playback time as a display friendly string.',
        'PositionDisplay': 'The playback position as a display friendly string.',
        'PlayingNowPosition': 'The index of the current track in Playing Now.',
        'PlayingNowTracks': 'The number of files in Playing Now.',
        'PlayingNowPositionDisplay': 'The current Playing Now position formatted for display.',
        'Bitrate': 'The current bitrate, in kbps.',
        'SampleRate': 'The current sample rate in Hz.',
        'Channels':' The number of audio channels in the current output.',
        'Chapter':' The current playback chapter.',
        'Volume':' The current volume.',
        'VolumeDisplay':' A display friendly string version of the current volume.',
        'ImageURL':' An image URL for the current file.',
        'Artist':' Artist of current file.',
        'Album':' Album of current file.',
        'Name':' Name of current file.',
        'Rating':' Rating of current file.',
        'Status':' Playback status as a displayable string.']).

mcws_command(
	'Playback/Playlist',
         'Get the current playlist.',
        [
            'Action':' The action to perform with the files (MPL: return MPL playlist; Play: plays files; Serialize: return serialized file array (basically a list of file keys)). (default: mpl)',
            'Shuffle':' Set to 1 to shuffle the files. (default: )',
            'ActiveFile':' A file key to set as active (used as the file that playback starts with, etc.). (default: -1)',
            'ActiveFileOnly':' Set to 1 to trim the returned files to only contain the active file. (default: )',
            'PlayMode':' Play mode flags delimited by commas (Add: adds to end of playlist; NextToPlay: adds files in the next to play position). (default: )',
            'Fields':' The fields to include in an MPL (use empty to include all fields). (default: )',
            'NoLocalFilenames':' Set to 1 to filter out local filenames from MPL output (since they might be meaningless to a server). (default: )',
            'Zone':' The zone the command is targetted for. (default: -1)',
            'ZoneType':' The type of value provided in ''Zone'' (ID: zone id; Index: zone index; Name: zone name (default: ID)'
		],
		[]).

			/*
      Playback/Zones
         Get information about all zones.
         Response:
            NumberZones: The number of zones.
            CurrentZoneID: The current zone ID.
            CurrentZoneIndex: The current zone index.
            ZoneName#: The name of the zone at index #.
            ZoneID#: The ID of the zone at index #.
            ZoneGUID#: The GUID of the zone at index #.
         Examples:
            Get zone information

      Playback/SetZone
         Set the active zone.
         Parameters:
            Zone: The zone the command is targetted for. (default: -1)
            ZoneType: The type of value provided in 'Zone' (ID: zone id; Index: zone index; Name: zone name (default: ID)
         Response:
         Examples:
            Click here

*/
mcws_command('Playback/PlayByIndex',
         'Play a file in Playing Now',
         ['Index': 'The index of the file to play (0 based). (default: 0)',
            'Zone': 'The zone the command is targetted for. (default: -1)',
            'ZoneType': 'The type of value provided in ''Zone'' (ID: zone id; Index: zone index; Name: zone name (default: ID)'],
		[]).

mcws_command('Playback/PlayByKey',
         'Play a file by database key.',
           ['Key': 'The key of the file to play. (default: -1)',
            'Location': 'The location of the file. Use ''End'' to add to the end of the current playlist, or a number to insert at a specific index. (default: )',
            'Album': 'Set to 1 to play the entire album starting at this file. (default: )',
            'Zone':'The zone the command is targetted for. (default: -1)',
            'ZoneType':'The type of value provided in ''Zone'' (ID: zone id; Index: zone index; Name: zone name (default: ID)'],
		[]).
		
/*
  
      Playback/ClearPlaylist
         Clear the current playlist and stop playback.
         Parameters:
            Zone: The zone the command is targetted for. (default: -1)
            ZoneType: The type of value provided in 'Zone' (ID: zone id; Index: zone index; Name: zone name (default: ID)
         Response:
         Examples:
            Clear Playing Now

      Playback/PlayAdvanced
         Plays files using a PLAY_COMMAND object (for internal use).
         Parameters:
            PlayCommand: Serialized PLAY_COMMAND object (for internal use only). (default: )
            Zone: The zone the command is targetted for. (default: -1)
            ZoneType: The type of value provided in 'Zone' (ID: zone id; Index: zone index; Name: zone name (default: ID)
         Response:
         Examples:
            Click here
*/

mcws_command('Library/Get',
			'Get a copy of the library',
			
         ['Settings':'Whether settings should be included with the library. (default: 0)',
          'IncrementalFileSignaturesXML': 	'A block of XML containing file signatures. When this is provided, 
											only changed files will be returned. (default: )'],
		  []).
/*

      Library/Merge
         Merge changes into the library.
         Parameters:
            Delta: A binary package describing the changes. (default: )
         Response:
            MasterRevision: Library 'Master' revision number after changes have been applied.
            SyncRevision: Library 'Sync' revision number after changes have been applied.
         Examples:
            Click here

      Library/GetRevision
         Get the revision number of the library.
         Response:
            Master: The master revision number of the database.
            Sync: The revision number of the database (only included sync-worthy revisions).
         Examples:
            Click here

      Library/Connect
         Connects to a remote library.
         Parameters:
            URL: A URL for connecting to a library server. (default: )
         Response:
         Examples:
            Click here
*/

mcws_command('Library/Values',
         'Get a list of values from the database (artists, albums, etc.).',
		 [	'Field':'The field to get values from. (default: )',
            'Files':'A search to use to get the files to retrieve values from (use empty to use all imported files). (default: )',
            'Filter':'Only return values that match this filter (empty returns all). (default: )',
            'Limit':'Maximum number of values to return. (default: )'],
		[]).

%    Playlists

mcws_command(
'Playlists/List',
       'Gets a list of all playlists.',
        [],
		[]).

%   Playlist

 mcws_command(
     'Playlist/Files',
         'Gets the files of a playlist.',
         % Parameters:
         [  'Playlist': 'The playlist the command is targetted for. (default: )',
            'PlaylistType': 'The type of value provided in ''Playlist'' (ID: playlist id; Path: playlist path). (default: ID)',
            'Action': 'The action to perform with the files (MPL: return MPL playlist; Play: plays files; Serialize: return serialized file array (basically a list of file keys)). (default: mpl)',
            'Shuffle': 'Set to 1 to shuffle the files. (default: )',
            'ActiveFile': 'A file key to set as active (used as the file that playback starts with, etc.). (default: -1)',
            'ActiveFileOnly':'Set to 1 to trim the returned files to only contain the active file. (default: )',
            'PlayMode':'Play mode flags delimited by commas (Add: adds to end of playlist; NextToPlay: adds files in the next to play position). (default: )',
            'Fields':'The fields to include in an MPL (use empty to include all fields). (default: )',
            'NoLocalFilenames':'Set to 1 to filter out local filenames from MPL output (since they might be meaningless to a server). (default: )',
            'Zone':'The zone the command is targetted for. (default: -1)',
            'ZoneType':'The type of value provided in ''Zone'' (ID: zone id; Index: zone index; Name: zone name (default: ID)'
		],
		[]).
			
%   Files

 mcws_command(
     'Files/Search',
         'Perform a database search for files.',
         % Parameters:
         [   'Query':'The search string (empty returns full library) (default: )',
            'Action':'The action to perform with the files (MPL: return MPL playlist; Play: plays files; Serialize: return serialized file array (basically a list of file keys)). (default: mpl)',
            'Shuffle':'Set to 1 to shuffle the files. (default: )',
            'ActiveFile':'A file key to set as active (used as the file that playback starts with, etc.). (default: -1)',
            'ActiveFileOnly':'Set to 1 to trim the returned files to only contain the active file. (default: )',
            'PlayMode':'Play mode flags delimited by commas (Add: adds to end of playlist; NextToPlay: adds files in the next to play position). (default: )',
            'Fields':'The fields to include in an MPL (use empty to include all fields). (default: )',
            'NoLocalFilenames':'Set to 1 to filter out local filenames from MPL output (since they might be meaningless to a server). (default: )',
            'Zone':'The zone the command is targetted for. (default: -1)',
            'ZoneType':'The type of value provided in ''Zone'' (ID: zone id; Index: zone index; Name: zone name (default: ID)'],
         []).

		 /*
   File

      File/GetFile
         Get the contents of a file in the database.
         Parameters:
            File: The key of the file. (default: -1)
            FileType: The type of value provided in 'File' (Key: file key; Filename: filename of file (default: key)
            Helper: Allows getting sidecar / helper files (used internally). (default: )
            Conversion: The conversion settings to use. (default: )
            Resolution: The resolution of the target device (allows making better conversion decisions). (default: )
            AndroidVersion: The Android version of the target device (if applicable). (default: )
            Prepare: Set to 1 to prepare the file (useful when waiting for video conversion, etc.). (default: )
         Response:
         Examples:
            Click here

      File/GetImage
         Get an image for a file in the database.
         Parameters:
            File: The key of the file. (default: -1)
            Type: The type of image to get: Thumbnail (default), Full, ThumbnailsBinary (default: Thumbnail)
         Response:
         Examples:
            Click here
*/
mcws_command(
      'File/SetInfo',
         'Set information about a file object.',
         [
            'File':'The key of the file. (default: -1)',
            'Field':'The field to set. (default: )',
            'Value':'The value to set the field to. (default: )'],
		[]).
		
        
/*
   Browse

      Browse/Children
         Returns child browse items for a location, enabling traversal of the browse hierarchy.
         Parameters:
            ID: The parent ID (empty to start at root). (default: )
            Skip: Set to 1 to skip browse levels that contain only one choice. (default: )
         Response:
         Examples:
            Click here

      Browse/Image
         Gets the image for a browse item.
         Parameters:
            ID: The ID of the browse item. (default: )
            Width: The width for the returned image. (default: 256)
            Height: The height for the returned image. (default: 256)
            FillTransparency: A color to fill image transparency with (hex number). (default: )
            Square: Set to one to crop the image to a square aspect ratio. (default: )
         Response:
         Examples:
            Click here

      Browse/Files
         Gets files for a browse item.
         Parameters:
            ID: The ID of the browse item. (default: )
            Action: The action to perform with the files (MPL: return MPL playlist; Play: plays files; Serialize: return serialized file array (basically a list of file keys)). (default: mpl)
            Shuffle: Set to 1 to shuffle the files. (default: )
            ActiveFile: A file key to set as active (used as the file that playback starts with, etc.). (default: -1)
            ActiveFileOnly: Set to 1 to trim the returned files to only contain the active file. (default: )
            PlayMode: Play mode flags delimited by commas (Add: adds to end of playlist; NextToPlay: adds files in the next to play position). (default: )
            Fields: The fields to include in an MPL (use empty to include all fields). (default: )
            NoLocalFilenames: Set to 1 to filter out local filenames from MPL output (since they might be meaningless to a server). (default: )
            Zone: The zone the command is targetted for. (default: -1)
            ZoneType: The type of value provided in 'Zone' (ID: zone id; Index: zone index; Name: zone name (default: ID)
         Response:
         Examples:
            Click here

   Control

      Control/MCC
         Perform a Media Core Command (MCC).
         Parameters:
            Command: The command (an integer value from the MC_COMMANDS enumeration; visit DevZone for the command list) (default: )
            Parameter: The parameter to the command (default: 0)
         Response:
         Examples:
            Play / pause
            Shuffle Playing Now

      Control/CommandLine
         Run a command line.
         Parameters:
            Arguments: The command line arguments (default: )
            Target: The target for the command line (uses launcher when empty) (default: )
         Response:
         Examples:
            Toggle pause

      Control/Key
         Simulate the press of a keyboard key.
         Parameters:
            Key: The key sequence to simulate, separated by semicolons. Keys can be a single letter or any of the following special keys: Insert, Menu, Delete, +, -, Left, Right, Up, Down, Backspace, Enter, Escape, Apps, Page Up, Page Down, Home, End, Space, Print Screen, Tab, NumPad0...NumPad9, F1...F24 (default: )
            Focus: Brings the program to the front and takes focus if set to 1. (default: )
         Response:
         Examples:
            Up
            Right
            Enter
            Ctrl+C (Copy)
            Ctrl+Shift+Left (Jump Back)
            Win+E (Windows Explorer)

   Television

      Television/SeekInformation
         Gets seek information for television playback.
         Parameters:
            File: The base file of the television program. (default: )
            Time: The time to get seeking information for. (default: )
         Response:
            AudioSeekByte: The seek byte for the audio stream.
            VideoSeekByte: The seek byte for the video stream.
         Examples:
            Click here

   UserInterface

      UserInterface/Info
         Gets information about the state of the user interface.
         Response:
            Mode: The user interface mode expressed as a UI_MODES integer (defined in MCCommands.h).
            InternalMode: The internal user interface mode as a UI_MODES integer (will be in the UI_MODE_INTERNAL_* block).
            ViewDisplayName: The display name of the current view.
            SelectionDisplayName: The display name of the current selection.
         Examples:
            Click here

*/
